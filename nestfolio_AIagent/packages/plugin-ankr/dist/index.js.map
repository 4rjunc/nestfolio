{"version":3,"sources":["../src/index.ts","../../../node_modules/zod/lib/index.mjs","../src/environment.ts","../src/actions/actionGetTokenHoldersCount.ts","../src/error/base.ts","../src/validator/apiParseValidation.ts","../src/actions/actionGetTokenPrice.ts","../src/actions/actionGetTokenTransfers.ts","../src/actions/actionGetAccountBalance.ts","../src/actions/actionGetTransactionsByAddress.ts","../src/actions/actionGetTransactionsByHash.ts","../src/actions/actionGetBlockchainStats.ts","../src/actions/actionGetCurrencies.ts","../src/actions/actionGetInteractions.ts","../src/actions/actionGetNFTHolders.ts","../src/actions/actionGetNFTTransfers.ts","../src/actions/actionGetNFTMetadata.ts","../src/actions/actionGetNFTsByOwner.ts"],"sourcesContent":["import { Plugin } from \"@elizaos/core\";\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport ora from 'ora';\nimport { getConfig } from \"./environment\";\nimport { actionGetTokenHoldersCount } from \"./actions/actionGetTokenHoldersCount\";\nimport { actionGetTokenPrice } from \"./actions/actionGetTokenPrice\";\nimport { actionGetTokenTransfers } from \"./actions/actionGetTokenTransfers\";\nimport { actionGetAccountBalance } from \"./actions/actionGetAccountBalance\";\nimport { actionGetTransactionsByAddress } from \"./actions/actionGetTransactionsByAddress\";\nimport { actionGetTransactionsByHash } from \"./actions/actionGetTransactionsByHash\";\nimport { actionGetBlockchainStats } from \"./actions/actionGetBlockchainStats\";\nimport { actionGetCurrencies } from \"./actions/actionGetCurrencies\";\nimport { actionGetInteractions } from \"./actions/actionGetInteractions\";\nimport { actionGetNFTHolders } from \"./actions/actionGetNFTHolders\";\nimport { actionGetNFTTransfers } from \"./actions/actionGetNFTTransfers\";\nimport { actionGetNFTMetadata } from \"./actions/actionGetNFTMetadata\";\nimport { actionGetNFTsByOwner } from \"./actions/actionGetNFTsByOwner\";\n\n\n\n// Start the loader\nconst spinner = ora({\n    text: chalk.cyan('Initializing ANKR Plugin...'),\n    spinner: 'dots12',\n    color: 'cyan'\n  }).start();\n\nconst actions = [\n    actionGetTokenHoldersCount,\n    actionGetTokenPrice,\n    actionGetTokenTransfers,\n    actionGetAccountBalance,\n    actionGetTransactionsByAddress,\n    actionGetTransactionsByHash,\n    actionGetBlockchainStats,\n    actionGetCurrencies,\n    actionGetInteractions,\n    actionGetNFTHolders,\n    actionGetNFTTransfers,\n    actionGetNFTMetadata,\n    actionGetNFTsByOwner,\n];\n\n// Get NVIDIA_NIM_SPASH from config\nconst ANKR_SPASH = getConfig().ANKR_WALLET;\n\n// Initial banner\n// Only show splash screen if NVIDIA_NIM_SPASH is true\nif (ANKR_SPASH) {\n    // Initial banner with chalk styling\n    console.log(`\\n${chalk.cyan('┌────────────────────────────────────────┐')}`);\n    console.log(chalk.cyan('│') + chalk.yellow.bold('          ANKR PLUGIN             ') + chalk.cyan(' │'));\n    console.log(chalk.cyan('├────────────────────────────────────────┤'));\n    console.log(chalk.cyan('│') + chalk.white('  Initializing ANKR Services...    ') + chalk.cyan('│'));\n    console.log(chalk.cyan('│') + chalk.white('  Version: 1.0.0                        ') + chalk.cyan('│'));\n    console.log(chalk.cyan('└────────────────────────────────────────┘'));\n\n    // Stop the loader\n    spinner.succeed(chalk.green('ANKR Plugin initialized successfully!'));\n\n    // Create a beautiful table for actions\n    const actionTable = new Table({\n      head: [\n        chalk.cyan('Action'),\n        chalk.cyan('H'),\n        chalk.cyan('V'),\n        chalk.cyan('E'),\n        chalk.cyan('Similes')\n      ],\n      style: {\n        head: [],\n        border: ['cyan']\n      }\n    });\n\n    // Format and add action information\n    for (const action of actions) {\n        actionTable.push([\n            chalk.white(action.name),\n            typeof action.handler === 'function' ? chalk.green('✓') : chalk.red('✗'),\n            typeof action.validate === 'function' ? chalk.green('✓') : chalk.red('✗'),\n            action.examples?.length > 0 ? chalk.green('✓') : chalk.red('✗'),\n            chalk.gray(action.similes?.join(', ') || 'none')\n        ]);\n    }\n\n    // Display the action table\n    console.log(`\\n${actionTable.toString()}`);\n\n    // Plugin status with a nice table\n    const statusTable = new Table({\n      style: {\n        border: ['cyan']\n      }\n    });\n\n    statusTable.push(\n      [chalk.cyan('Plugin Status')],\n      [chalk.white('Name    : ') + chalk.yellow('plugin-ankr')],\n      [chalk.white('Actions : ') + chalk.green(actions.length.toString())],\n      [chalk.white('Status  : ') + chalk.green('Loaded & Ready')]\n    );\n\n    console.log(`\\n${statusTable.toString()}\\n`);\n  } else {\n    // Stop the loader silently if splash is disabled\n    spinner.stop();\n  }\n\n  const ankrPlugin: Plugin = {\n    name: \"plugin-ankr\",\n    description: \"Ankr Plugin for web3\",\n    actions: actions,\n    evaluators: []\n  };\n\nexport { ankrPlugin };\nexport default ankrPlugin;\n","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\nfunction custom(check, params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            if (!check(data)) {\n                const p = typeof params === \"function\"\n                    ? params(data)\n                    : typeof params === \"string\"\n                        ? { message: params }\n                        : params;\n                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\n            }\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\n// Environment Variables\nlet ENV= \"production\";\n\n// ANKR API Configuration\nexport const ANKR_ENDPOINTS = {\n    production: {\n        multichain: \"https://rpc.ankr.com/multichain/\",\n    },\n\n} as const;\n\nexport const ankrEnvSchema = z.object({\n    // API Configuration\n    ANKR_ENV: z.enum([\"production\", \"staging\"]).default(\"production\"),\n    ANKR_WALLET: z.string().min(1, \"ANKR_WALLET is required\"),\n\n    // Request Configuration\n    ANKR_MAX_RETRIES: z.string().transform(Number).default(\"3\"),\n    ANKR_RETRY_DELAY: z.string().transform(Number).default(\"1000\"),\n    ANKR_TIMEOUT: z.string().transform(Number).default(\"5000\"),\n\n    // Logging Configuration\n    ANKR_GRANULAR_LOG: z.boolean().default(true),\n    ANKR_LOG_LEVEL: z.enum([\"error\", \"warn\", \"info\", \"debug\"]).default(\"info\"),\n\n    // Runtime Configuration\n    ANKR_RUNTIME_CHECK_MODE: z.boolean().default(false),\n    ANKR_SPASH: z.boolean().default(false)\n});\n\nexport type ankrConfig = z.infer<typeof ankrEnvSchema>;\n\nexport function getConfig(\n    env: string | undefined | null = ENV ||\n        process.env.ANKR_ENV\n): ankrConfig {\n    ENV = env || \"production\";\n\n    return {\n        ANKR_ENV: (env as \"production\" | \"staging\") || \"production\",\n        ANKR_WALLET: process.env.ANKR_WALLET || \"\",\n        ANKR_MAX_RETRIES: Number(process.env.ANKR_MAX_RETRIES || \"3\"),\n        ANKR_RETRY_DELAY: Number(process.env.ANKR_RETRY_DELAY || \"1000\"),\n        ANKR_TIMEOUT: Number(process.env.ANKR_TIMEOUT || \"5000\"),\n        ANKR_GRANULAR_LOG: process.env.ANKR_GRANULAR_LOG === \"true\" || false,\n        ANKR_LOG_LEVEL: (process.env.ANKR_LOG_LEVEL as \"error\" | \"warn\" | \"info\" | \"debug\") || \"info\",\n        ANKR_RUNTIME_CHECK_MODE: process.env.RUNTIME_CHECK_MODE === \"true\" || false,\n        ANKR_SPASH: process.env.ANKR_SPASH === \"true\" || false\n    };\n}\n\nexport async function validateankrConfig(\n    runtime: IAgentRuntime\n): Promise<ankrConfig> {\n    try {\n        const envConfig = getConfig(\n            runtime.getSetting(\"ankr_ENV\") ?? undefined\n        );\n\n        const config = {\n            ANKR_ENV: process.env.ANKR_ENV || runtime.getSetting(\"ANKR_ENV\") || envConfig.ANKR_ENV,\n            ANKR_WALLET: process.env.ANKR_WALLET || runtime.getSetting(\"ANKR_WALLET\") || envConfig.ANKR_WALLET,\n            ANKR_MAX_RETRIES: process.env.ANKR_MAX_RETRIES || runtime.getSetting(\"ANKR_MAX_RETRIES\") || envConfig.ANKR_MAX_RETRIES.toString(),\n            ANKR_RETRY_DELAY: process.env.ANKR_RETRY_DELAY || runtime.getSetting(\"ANKR_RETRY_DELAY\") || envConfig.ANKR_RETRY_DELAY.toString(),\n            ANKR_TIMEOUT: process.env.ANKR_TIMEOUT || runtime.getSetting(\"ANKR_TIMEOUT\") || envConfig.ANKR_TIMEOUT.toString(),\n            ANKR_GRANULAR_LOG: process.env.ANKR_GRANULAR_LOG === \"true\" || false,\n            ANKR_LOG_LEVEL: process.env.ANKR_LOG_LEVEL || runtime.getSetting(\"ANKR_LOG_LEVEL\") || envConfig.ANKR_LOG_LEVEL,\n            ANKR_RUNTIME_CHECK_MODE: process.env.RUNTIME_CHECK_MODE === \"true\" || false,\n            ANKR_SPASH: process.env.ANKR_SPASH === \"true\" || false\n        };\n\n        return ankrEnvSchema.parse(config);\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        throw new Error(`Failed to validate ANKR configuration: ${errorMessage}`);\n    }\n}\n\n// Export endpoints configuration\nexport const getEndpoints = (env: string = ENV) =>\n    ANKR_ENDPOINTS[env as keyof typeof ANKR_ENDPOINTS];\n\n// Helper to get full endpoint URL\nexport function getEndpointUrl(endpoint: string, env: string = ENV): string {\n    const endpoints = getEndpoints(env);\n    const parts = endpoint.split('.');\n    let current: Record<string, unknown> = endpoints;\n\n    for (const part of parts) {\n        if (current[part] === undefined) {\n            throw new Error(`Invalid endpoint path: ${endpoint}`);\n        }\n        current = current[part] as Record<string, unknown>;\n    }\n\n    if (typeof current !== 'string') {\n        throw new Error(`Invalid endpoint path: ${endpoint}`);\n    }\n\n    return current;\n}","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetTokenHoldersCount] ${message}`, data);\n        console.log(`[GetTokenHoldersCount] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetTokenHoldersCountContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        contractAddress?: string;\n    };\n    success?: boolean;\n    data?: {\n        blockchain: string;\n        contractAddress: string;\n        tokenDecimals: number;\n        holderCountHistory: Array<{\n            holderCount: number;\n            totalAmount: string;\n            totalAmountRawInteger: string;\n            lastUpdatedAt: string;\n        }>;\n        latestHoldersCount: number;\n        syncStatus: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\nexport const actionGetTokenHoldersCount: Action = {\n    name: \"GET_TOKEN_HOLDERS_COUNT_ANKR\",\n    similes: [\"COUNT_HOLDERS\", \"TOTAL_HOLDERS\", \"HOLDERS_COUNT\", \"NUMBER_OF_HOLDERS\"],\n    description: \"Get the total number of holders and historical data for a specific token.\",\n    // Fix the example data to match the interface\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"How many holders does [contract]0xdAC17F958D2ee523a2206206994597C13D831ec7[/contract] have? [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"\n                }\n            } as GetTokenHoldersCountContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Token Holders Count on ETH:\\n\\n\" +\n                      \"Current Holders: 500,000\\n\\n\" +\n                      \"Historical Data:\\n\" +\n                      \"1. 1/24/2024\\n\" +\n                      \"   Holders: 500,000\\n\" +\n                      \"   Total Amount: 1,000,000\\n\\n\" +\n                      \"Sync Status: completed (0s)\",\n                success: true,\n                data: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n                    tokenDecimals: 18,\n                    holderCountHistory: [\n                        {\n                            holderCount: 500000,\n                            totalAmount: \"1000000\",\n                            totalAmountRawInteger: \"1000000000000000000000000\",\n                            lastUpdatedAt: \"2024-01-24T10:30:15Z\"\n                        }\n                    ],\n                    latestHoldersCount: 500000,\n                    syncStatus: {\n                        timestamp: 1706093415,\n                        lag: \"0s\",\n                        status: \"completed\"\n                    }\n                }\n            } as GetTokenHoldersCountContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_TOKEN_HOLDERS_COUNT_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_TOKEN_HOLDERS_COUNT_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetTokenHoldersCountContent;\n            const parsedContent = parseAPIContent(content.text);\n\n            if (!parsedContent.chain || !parsedContent.contract) {\n                throw new ValidationError(\"Blockchain and contract address are required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_TOKEN_HOLDERS_COUNT_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetTokenHoldersCountContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n            // Parse the prompt using our API content parser\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasChain: !!parsedContent.chain,\n                contract: parsedContent.contract,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['contract', 'chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: parsedContent.chain,\n                contractAddress: parsedContent.contract,\n                pageSize: 10\n            };\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTokenHoldersCount\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const result = response.data.result;\n\n                // Format the response text\n                let formattedText = `Token Holders Count on ${parsedContent.chain?.toUpperCase() || 'UNKNOWN'}:\\n\\n`;\n                formattedText += `Current Holders: ${result.latestHoldersCount.toLocaleString()}\\n\\n`;\n                formattedText += \"Historical Data:\\n\";\n\n                result.holderCountHistory.forEach((history: {\n                    holderCount: number;\n                    totalAmount: string;\n                    totalAmountRawInteger: string;\n                    lastUpdatedAt: string;\n                }, index: number) => {\n                    const date = new Date(history.lastUpdatedAt).toLocaleDateString();\n                    formattedText += `\n${index + 1}. ${date}\n   Holders: ${history.holderCount.toLocaleString()}\n   Total Amount: ${Number(history.totalAmount).toLocaleString()}`;\n                });\n\n                if (result.syncStatus) {\n                    formattedText += `\n\nSync Status: ${result.syncStatus.status} (${result.syncStatus.lag})`;\n                }\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: result\n                    } as GetTokenHoldersCountContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch token holders count: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch token holders count\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting token holders count: ${errorMessage}`,\n                    success: false\n                } as GetTokenHoldersCountContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_TOKEN_HOLDERS_COUNT_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetTokenHoldersCount;\n","export class HyperbolicError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'HyperbolicError';\n    Object.setPrototypeOf(this, HyperbolicError.prototype);\n  }\n}\n\nexport class ConfigurationError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ConfigurationError';\n    Object.setPrototypeOf(this, ConfigurationError.prototype);\n  }\n}\n\nexport class APIError extends HyperbolicError {\n  constructor(message: string, public statusCode?: number) {\n    super(message);\n    this.name = 'APIError';\n    Object.setPrototypeOf(this, APIError.prototype);\n  }\n}\n\nexport class ValidationError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ValidationError';\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n}\n\nexport class SSHError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SSHError';\n    Object.setPrototypeOf(this, SSHError.prototype);\n  }\n}\n\nexport class GPUError extends HyperbolicError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'GPUError';\n    Object.setPrototypeOf(this, GPUError.prototype);\n  }\n}\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { elizaLogger } from \"@elizaos/core\";\nimport { APIError, ValidationError } from '../error/base';\n\n// ------------------------------------------------------------------------------------------------\n// Types\n// ------------------------------------------------------------------------------------------------\ninterface ParsedAPIContent {\n    wallet?: string;\n    chain?: string;\n    contract?: string;\n    token?: string;\n    txHash?: string;\n    block?: string;\n    block2?: string;\n    fromTimestamp?: number;\n    toTimestamp?: number;\n    raw: {\n        text: string;\n        matches: {\n            wallet: boolean;\n            chain: boolean;\n            contract: boolean;\n            token: boolean;\n            txHash: boolean;\n            block: boolean;\n            block2: boolean;\n            fromTimestamp: boolean;\n            toTimestamp: boolean;\n        };\n    };\n}\n\n// ------------------------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------------------------\nconst SUPPORTED_CHAINS = [\n    'eth', 'ethereum',\n    'bsc', 'bnb',\n    'polygon', 'matic',\n    'avalanche', 'avax',\n    'optimism', 'op',\n    'base'\n];\n\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nconst TX_HASH_REGEX = /^0x[a-fA-F0-9]{64}$/;\n\n// ------------------------------------------------------------------------------------------------\n// Helper Functions\n// ------------------------------------------------------------------------------------------------\nconst normalizeChainName = (chain: string): string => {\n    chain = chain.toLowerCase().trim();\n    switch (chain) {\n        case 'eth':\n        case 'ethereum':\n            return 'eth';\n        case 'bsc':\n        case 'bnb':\n            return 'bsc';\n        case 'polygon':\n        case 'matic':\n            return 'polygon';\n        case 'avalanche':\n        case 'avax':\n            return 'avalanche';\n        case 'optimism':\n        case 'op':\n            return 'optimism';\n        case 'base':\n            return 'base';\n        default:\n            throw new ValidationError(`Unsupported blockchain: ${chain}`);\n    }\n};\n\nconst validateAddress = (address: string): boolean => {\n    return ADDRESS_REGEX.test(address);\n};\n\nconst validateTxHash = (hash: string): boolean => {\n    return TX_HASH_REGEX.test(hash);\n};\n\n// Add block number validation\nconst validateBlockNumber = (block: string): boolean => {\n    return /^\\d+$/.test(block);\n};\n\n// Add timestamp validation\nconst validateTimestamp = (timestamp: string): boolean => {\n    const num = parseInt(timestamp, 10);\n    return !isNaN(num) && num > 0;\n};\n\n// Add token ID validation\nconst validateTokenId = (tokenId: string): boolean => {\n    return tokenId.trim() !== '';  // Just ensure it's not empty\n};\n\n// ------------------------------------------------------------------------------------------------\n// Main Parser\n// ------------------------------------------------------------------------------------------------\n/**\n * Parses API-related content from text, extracting wallet addresses, chain names,\n * contract addresses, token addresses, and transaction hashes.\n *\n * @param text The input text containing tagged content\n * @returns ParsedAPIContent object containing extracted and validated information\n *\n * @example\n * Input text: \"Check balance for [wallet]0x123...[/wallet] on [chain]eth[/chain]\"\n */\nexport function parseAPIContent(text: string): ParsedAPIContent {\n    try {\n        const parsed: ParsedAPIContent = {\n            raw: {\n                text,\n                matches: {\n                    wallet: false,\n                    chain: false,\n                    contract: false,\n                    token: false,\n                    txHash: false,\n                    block: false,\n                    block2: false,\n                    fromTimestamp: false,\n                    toTimestamp: false\n                }\n            }\n        };\n\n        // Parse wallet address\n        const walletMatch = text.match(/\\[wallet\\]([\\s\\S]*?)\\[\\/wallet\\]/);\n        if (walletMatch) {\n            const wallet = walletMatch[1].trim();\n            if (!validateAddress(wallet)) {\n                throw new ValidationError(`Invalid wallet address: ${wallet}`);\n            }\n            parsed.wallet = wallet;\n            parsed.raw.matches.wallet = true;\n        }\n\n        // Parse chain name\n        const chainMatch = text.match(/\\[chain\\]([\\s\\S]*?)\\[\\/chain\\]/);\n        if (chainMatch) {\n            const chain = chainMatch[1].trim();\n            parsed.chain = normalizeChainName(chain);\n            parsed.raw.matches.chain = true;\n        }\n\n        // Parse contract address\n        const contractMatch = text.match(/\\[contract\\]([\\s\\S]*?)\\[\\/contract\\]/);\n        if (contractMatch) {\n            const contract = contractMatch[1].trim();\n            if (!validateAddress(contract)) {\n                throw new ValidationError(`Invalid contract address: ${contract}`);\n            }\n            parsed.contract = contract;\n            parsed.raw.matches.contract = true;\n        }\n\n        // Parse token ID (modified from token address)\n        const tokenMatch = text.match(/\\[token\\]([\\s\\S]*?)\\[\\/token\\]/);\n        if (tokenMatch) {\n            const token = tokenMatch[1].trim();\n            if (!validateTokenId(token)) {\n                throw new ValidationError(`Invalid token ID: ${token}`);\n            }\n            parsed.token = token;\n            parsed.raw.matches.token = true;\n        }\n\n        // Parse transaction hash\n        const txMatch = text.match(/\\[txHash\\]([\\s\\S]*?)\\[\\/txHash\\]/);\n        if (txMatch) {\n            const txHash = txMatch[1].trim();\n            if (!validateTxHash(txHash)) {\n                throw new ValidationError(`Invalid transaction hash: ${txHash}`);\n            }\n            parsed.txHash = txHash;\n            parsed.raw.matches.txHash = true;\n        }\n\n        // Parse block number\n        const blockMatch = text.match(/\\[block\\]([\\s\\S]*?)\\[\\/block\\]/);\n        if (blockMatch) {\n            const block = blockMatch[1].trim();\n            if (!validateBlockNumber(block)) {\n                throw new ValidationError(`Invalid block number: ${block}`);\n            }\n            parsed.block = block;\n            parsed.raw.matches.block = true;\n        }\n\n        // Parse second block number if present\n        const block2Match = text.match(/\\[block2\\]([\\s\\S]*?)\\[\\/block2\\]/);\n        if (block2Match) {\n            const block2 = block2Match[1].trim();\n            if (!validateBlockNumber(block2)) {\n                throw new ValidationError(`Invalid block number: ${block2}`);\n            }\n            parsed.block2 = block2;\n            parsed.raw.matches.block2 = true;\n        }\n\n        // Parse fromTimestamp\n        const fromTimestampMatch = text.match(/\\[fromtimestamp\\]([\\s\\S]*?)\\[\\/fromtimestamp\\]/);\n        if (fromTimestampMatch) {\n            const timestamp = fromTimestampMatch[1].trim();\n            if (!validateTimestamp(timestamp)) {\n                throw new ValidationError(`Invalid from timestamp: ${timestamp}`);\n            }\n            parsed.fromTimestamp = parseInt(timestamp, 10);\n            parsed.raw.matches.fromTimestamp = true;\n        }\n\n        // Parse toTimestamp\n        const toTimestampMatch = text.match(/\\[totimestamp\\]([\\s\\S]*?)\\[\\/totimestamp\\]/);\n        if (toTimestampMatch) {\n            const timestamp = toTimestampMatch[1].trim();\n            if (!validateTimestamp(timestamp)) {\n                throw new ValidationError(`Invalid to timestamp: ${timestamp}`);\n            }\n            parsed.toTimestamp = parseInt(timestamp, 10);\n            parsed.raw.matches.toTimestamp = true;\n        }\n\n        return parsed;\n\n    } catch (error) {\n        elizaLogger.error(\"API content parsing failed\", {\n            error: error instanceof Error ? error.message : String(error)\n        });\n        throw error;\n    }\n}\n\n// ------------------------------------------------------------------------------------------------\n// Validation Helpers\n// ------------------------------------------------------------------------------------------------\nexport function validateRequiredFields(\n    parsed: ParsedAPIContent,\n    required: Array<keyof ParsedAPIContent['raw']['matches']>\n): void {\n    const missing = required.filter(field => !parsed.raw.matches[field]);\n    if (missing.length > 0) {\n        throw new ValidationError(\n            `Missing required fields: ${missing.join(', ')}. Please provide them in the format [field]value[/field]`\n        );\n    }\n}\n\nexport function validateChainSupport(chain: string): void {\n    if (!SUPPORTED_CHAINS.includes(chain.toLowerCase())) {\n        throw new ValidationError(\n            `Unsupported blockchain: ${chain}. Supported chains: ${SUPPORTED_CHAINS.join(', ')}`\n        );\n    }\n}","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetTokenPrice] ${message}`, data);\n        console.log(`[GetTokenPrice] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetTokenPriceContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        contractAddress?: string;\n    };\n    success?: boolean;\n    data?: {\n        blockchain: string;\n        contractAddress: string;\n        usdPrice: string;\n        syncStatus: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\nexport const actionGetTokenPrice: Action = {\n    name: \"GET_TOKEN_PRICE_ANKR\",\n    similes: [\"CHECK_PRICE\", \"TOKEN_PRICE\", \"CRYPTO_PRICE\", \"PRICE_CHECK\"],\n    description: \"Get the current USD price for any token on eth blockchain.\",\n\n\n\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"What's the current price of [contract]0x8290333cef9e6d528dd5618fb97a76f268f3edd4[/contract] token [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0x8290333cef9e6d528dd5618fb97a76f268f3edd4\"\n                }\n            } as GetTokenPriceContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Current token price on eth:\\n\\n\" +\n                      \"Price: $0.03024 USD\\n\" +\n                      \"Contract: 0x8290...3edd4\\n\" +\n                      \"Sync Status: synced (lag: -8s)\",\n                success: true,\n                data: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0x8290333cef9e6d528dd5618fb97a76f268f3edd4\",\n                    usdPrice: \"0.030239944206509556547\",\n                    syncStatus: {\n                        timestamp: 1737760907,\n                        lag: \"-8s\",\n                        status: \"synced\"\n                    }\n                }\n            } as GetTokenPriceContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_TOKEN_PRICE_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_TOKEN_PRICE_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetTokenPriceContent;\n            const parsedContent = parseAPIContent(content.text);\n\n            if (!parsedContent.chain || !parsedContent.contract) {\n                throw new ValidationError(\"Blockchain and contract address are required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_TOKEN_PRICE_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetTokenPriceContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n            const parsedContent = parseAPIContent(messageContent.text);\n            validateRequiredFields(parsedContent, ['contract', 'chain']);\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTokenPrice\",\n                        params: {\n                            blockchain: parsedContent.chain,\n                            contractAddress: parsedContent.contract\n                        },\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const result = response.data.result;\n                const price = Number(result.usdPrice).toFixed(5);\n\n                const formattedText = `Current token price on ${parsedContent.chain}:\\n\\n` +\n                    `Price: $${price} USD\\n` +\n                    `Contract: ${result.contractAddress.slice(0, 6)}...${result.contractAddress.slice(-4)}\\n` +\n                    `Sync Status: ${result.syncStatus.status} (lag: ${result.syncStatus.lag})`;\n\n                if (callback) {\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: result\n                    } as GetTokenPriceContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch token price: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch token price\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting token price: ${errorMessage}`,\n                    success: false\n                } as GetTokenPriceContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_TOKEN_PRICE_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetTokenPrice;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetTokenTransfers] ${message}`, data);\n        console.log(`[GetTokenTransfers] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetTokenTransfersContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        contractAddress?: string;\n        fromTimestamp?: number;\n        toTimestamp?: number;\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        transfers: Array<{\n            fromAddress: string;\n            toAddress: string;\n            contractAddress: string;\n            value: string;\n            valueRawInteger: string;\n            blockchain: string;\n            tokenName: string;\n            tokenSymbol: string;\n            tokenDecimals: number;\n            thumbnail: string;\n            transactionHash: string;\n            blockHeight: number;\n            timestamp: number;\n        }>;\n        syncStatus?: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\n// Define transfer type\ntype TokenTransfer = {\n    fromAddress: string;\n    toAddress: string;\n    contractAddress: string;\n    value: string;\n    valueRawInteger: string;\n    blockchain: string;\n    tokenName: string;\n    tokenSymbol: string;\n    tokenDecimals: number;\n    thumbnail: string;\n    transactionHash: string;\n    blockHeight: number;\n    timestamp: number;\n};\n\nexport const actionGetTokenTransfers: Action = {\n    name: \"GET_TOKEN_TRANSFERS_ANKR\",\n    similes: [\"LIST_TRANSFERS\", \"SHOW_TRANSFERS\", \"TOKEN_MOVEMENTS\", \"TRANSFER_HISTORY\"],\n    description: \"Get transfer history for a specific token or address on eth.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me recent contract [contract]0xff970a61a04b1ca14834a43f5de4533ebddb5cc8[/contract] transfers [chain]eth[/chain] from [fromtimestamp]1655197483[/fromtimestamp] to [totimestamp]1656061483[/totimestamp]\",\n                filters: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0xff970a61a04b1ca14834a43f5de4533ebddb5cc8\",\n                    pageSize: 5,\n                    fromTimestamp: 1655197483,\n                    toTimestamp: 1656061483\n                }\n            } as GetTokenTransfersContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the 5 most recent USDC transfers on eth:\\n\\n\" +\n                      \"1. Transfer\\n\" +\n                      \"   From: 0x1234...5678\\n\" +\n                      \"   To: 0xabcd...ef01\\n\" +\n                      \"   Amount: 10,000 USDC\\n\" +\n                      \"   Time: 2024-01-24 10:30:15\\n\\n\" +\n                      \"2. Transfer\\n\" +\n                      \"   From: 0x9876...5432\\n\" +\n                      \"   To: 0xfedc...ba98\\n\" +\n                      \"   Amount: 5,000 USDC\\n\" +\n                      \"   Time: 2024-01-24 10:29:45\",\n                success: true,\n                data: {\n                    transfers: [{\n                        fromAddress: \"0x1234567890123456789012345678901234567890\",\n                        toAddress: \"0xabcdef0123456789abcdef0123456789abcdef01\",\n                        contractAddress: \"0xff970a61a04b1ca14834a43f5de4533ebddb5cc8\",\n                        value: \"10000.0\",\n                        valueRawInteger: \"10000000000000000000000\",\n                        blockchain: \"eth\",\n                        tokenName: \"USD Coin\",\n                        tokenSymbol: \"USDC\",\n                        tokenDecimals: 6,\n                        thumbnail: \"\",\n                        transactionHash: \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n                        blockHeight: 123456789,\n                        timestamp: 1706093415\n                    }],\n                    syncStatus: {\n                        timestamp: 1706093415,\n                        lag: \"0s\",\n                        status: \"completed\"\n                    }\n                }\n            } as GetTokenTransfersContent\n        } as ActionExample\n    ]],\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_TOKEN_TRANSFERS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_TOKEN_TRANSFERS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetTokenTransfersContent;\n            const parsedContent = parseAPIContent(content.text);\n\n            if (!parsedContent.chain || !parsedContent.contract) {\n                throw new ValidationError(\"Blockchain and contract address are required\");\n            }\n\n            if (parsedContent.fromTimestamp && parsedContent.toTimestamp) {\n                if (parsedContent.fromTimestamp > parsedContent.toTimestamp) {\n                    throw new ValidationError(\"From timestamp must be less than to timestamp\");\n                }\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_TOKEN_TRANSFERS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetTokenTransfersContent;\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            // Parse the prompt using our API content parser\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasChain: !!parsedContent.chain,\n                hasFromTimestamp: !!parsedContent.fromTimestamp,\n                hasToTimestamp: !!parsedContent.toTimestamp,\n                contract: parsedContent.contract,\n                chain: parsedContent.chain,\n                fromTimestamp: parsedContent.fromTimestamp,\n                toTimestamp: parsedContent.toTimestamp\n            });\n\n            validateRequiredFields(parsedContent, ['contract', 'chain', 'fromTimestamp', 'toTimestamp']);\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTokenTransfers\",\n                        params: {\n                            address: parsedContent.contract,\n                            blockchain: [parsedContent.chain],\n                            fromTimestamp: parsedContent.fromTimestamp,\n                            toTimestamp: parsedContent.toTimestamp,\n                            pageSize: messageContent.filters?.pageSize || 10\n                        },\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const result = response.data.result;\n\n                let formattedText = `Token Transfers on ${parsedContent.chain?.toUpperCase() || 'UNKNOWN'}:\\n\\n`;\n\n                result.transfers.forEach((transfer: TokenTransfer, index: number) => {\n                    const date = new Date(transfer.timestamp * 1000).toLocaleString();\n                    const value = Number(transfer.value).toLocaleString();\n\n                    formattedText += `${index + 1}. Transfer\\n`;\n                    formattedText += `   From: ${transfer.fromAddress.slice(0, 6)}...${transfer.fromAddress.slice(-4)}\\n`;\n                    formattedText += `   To: ${transfer.toAddress.slice(0, 6)}...${transfer.toAddress.slice(-4)}\\n`;\n                    formattedText += `   Amount: ${value} ${transfer.tokenSymbol}\\n`;\n                    formattedText += `   Token: ${transfer.tokenName}\\n`;\n                    formattedText += `   Time: ${date}\\n\\n`;\n                });\n\n                if (result.syncStatus) {\n                    formattedText += `\\nSync Status: ${result.syncStatus.status} (lag: ${result.syncStatus.lag})\\n`;\n                }\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            transfers: result.transfers,\n                            nextPageToken: result.nextPageToken\n                        }\n                    } as GetTokenTransfersContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch token transfers: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch token transfers\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting token transfers: ${errorMessage}`,\n                    success: false\n                } as GetTokenTransfersContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_TOKEN_TRANSFERS_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetTokenTransfers;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetAccountBalance] ${message}`, data);\n        console.log(`[GetAccountBalance] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetAccountBalanceContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string[];\n        walletAddress?: string;\n    };\n    success?: boolean;\n    data?: {\n        address: string;\n        balances: Array<{\n            blockchain: string;\n            tokenName: string;\n            symbol: string;\n            balance: string;\n            balanceRawInteger: string;\n            balanceUsd: string;\n            tokenDecimals: number;\n            tokenType: string;\n            contractAddress?: string;\n        }>;\n    };\n}\n\n// Add interface for balance\ninterface TokenBalance {\n    blockchain: string;\n    contractAddress?: string;\n    tokenName: string;\n    tokenSymbol: string;\n    tokenDecimals: number;\n    tokenType: string;\n    holderAddress: string;\n    balance: string;\n    balanceRawInteger: string;\n    balanceUsd: string;\n    tokenPrice: string;\n}\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetAccountBalance: Action = {\n    name: \"GET_ACCOUNT_BALANCE_ANKR\",\n    similes: [\"CHECK_BALANCE\", \"SHOW_BALANCE\", \"VIEW_BALANCE\", \"GET_WALLET_BALANCE\"],\n    description: \"Retrieve account balance information across multiple blockchains.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me the balance for wallet [wallet]0x1234567890123456789012345678901234567890[/wallet] on [chain]eth[/chain]\",\n                filters: {\n                    blockchain: [\"eth\"],\n                    walletAddress: \"0x1234567890123456789012345678901234567890\"\n                }\n            } as GetAccountBalanceContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the balances for wallet 0x1234...7890:\\n\\n\" +\n                      \"1. ETH (Native)\\n\" +\n                      \"   Balance: 1.5 ETH\\n\" +\n                      \"   USD Value: $3,000.00\\n\\n\" +\n                      \"2. USDC (ERC20)\\n\" +\n                      \"   Balance: 1000 USDC\\n\" +\n                      \"   Contract: 0xa0b8...c4d5\\n\" +\n                      \"   USD Value: $1,000.00\",\n                success: true,\n                data: {\n                    address: \"0x1234567890123456789012345678901234567890\",\n                    balances: [{\n                        blockchain: \"eth\",\n                        tokenName: \"Ethereum\",\n                        symbol: \"ETH\",\n                        balance: \"1.5\",\n                        balanceRawInteger: \"1500000000000000000\",\n                        balanceUsd: \"3000.00\",\n                        tokenDecimals: 18,\n                        tokenType: \"NATIVE\"\n                    }, {\n                        blockchain: \"eth\",\n                        tokenName: \"USD Coin\",\n                        symbol: \"USDC\",\n                        balance: \"1000\",\n                        balanceRawInteger: \"1000000000\",\n                        balanceUsd: \"1000.00\",\n                        tokenDecimals: 6,\n                        tokenType: \"ERC20\",\n                        contractAddress: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"\n                    }]\n                }\n            } as GetAccountBalanceContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_ACCOUNT_BALANCE_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_ACCOUNT_BALANCE_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetAccountBalanceContent;\n\n            if (!content.filters?.walletAddress) {\n                throw new ValidationError(\"Wallet address is required\");\n            }\n\n            if (content.filters?.blockchain && !Array.isArray(content.filters.blockchain)) {\n                throw new ValidationError(\"Blockchain must be an array\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_ACCOUNT_BALANCE_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetAccountBalanceContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasFilters: !!messageContent?.filters,\n                textContent: messageContent?.text,\n                contentType: typeof messageContent?.text\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasWallet: !!parsedContent.wallet,\n                hasChain: !!parsedContent.chain,\n                wallet: parsedContent.wallet,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['wallet', 'chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: [parsedContent.chain],\n                walletAddress: parsedContent.wallet\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: ANKR_ENDPOINTS.production.multichain\n            });\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getAccountBalance\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const balances = response.data.result.assets;\n                const address = parsedContent.wallet;\n\n                // Format the response text\n                let formattedText = `Here are the balances for wallet ${address?.slice(0, 6)}...${address?.slice(-4)}:\\n\\n`;\n\n                // Use the interface instead of any\n                balances.forEach((balance: TokenBalance, index: number) => {\n                    formattedText += `${index + 1}. ${balance.tokenName} (${balance.tokenType})\\n`;\n                    formattedText += `   Balance: ${balance.balance} ${balance.tokenSymbol}\\n`;\n                    if (balance.contractAddress) {\n                        formattedText += `   Contract: ${balance.contractAddress.slice(0, 6)}...${balance.contractAddress.slice(-4)}\\n`;\n                    }\n                    formattedText += `   USD Value: $${Number.parseFloat(balance.balanceUsd).toFixed(2)}\\n\\n`;\n                });\n\n                // ------------------------------------------------------------------------------------------------\n                // Core Callback logic\n                // ------------------------------------------------------------------------------------------------\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            address,\n                            balances\n                        }\n                    } as GetAccountBalanceContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch balance data: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch balance data\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting account balance: ${errorMessage}`,\n                    success: false\n                } as GetAccountBalanceContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_ACCOUNT_BALANCE_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetAccountBalance;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetTransactionsByAddress] ${message}`, data);\n        console.log(`[GetTransactionsByAddress] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetTransactionsByAddressContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        address?: string;\n        pageSize?: number;\n        includeLogs?: boolean;\n    };\n    success?: boolean;\n    data?: {\n        nextPageToken?: string;\n        transactions: Array<{\n            blockHash: string;\n            blockNumber: string;\n            from: string;\n            to: string;\n            hash: string;\n            value: string;\n            gas: string;\n            gasPrice: string;\n            gasUsed: string;\n            input: string;\n            nonce: string;\n            timestamp: string;\n            status: string;\n            blockchain: string;\n            logs?: Array<{\n                address: string;\n                topics: string[];\n                data: string;\n                blockNumber: string;\n                transactionHash: string;\n                logIndex: string;\n                timestamp: string;\n            }>;\n        }>;\n        syncStatus?: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\n// Define transaction type\ntype Transaction = {\n    blockHash: string;\n    blockNumber: string;\n    from: string;\n    to: string;\n    hash: string;\n    value: string;\n    gas: string;\n    gasPrice: string;\n    gasUsed: string;\n    input: string;\n    nonce: string;\n    timestamp: string;\n    status: string;\n    blockchain: string;\n    logs?: Array<{\n        address: string;\n        topics: string[];\n        data: string;\n        blockNumber: string;\n        transactionHash: string;\n        logIndex: string;\n        timestamp: string;\n    }>;\n};\n\nexport const actionGetTransactionsByAddress: Action = {\n    name: \"GET_TRANSACTIONS_BY_ADDRESS_ANKR\",\n    similes: [\"LIST_TXS\", \"SHOW_TXS\", \"VIEW_TRANSACTIONS\", \"GET_ADDRESS_TXS\"],\n    description: \"Get transactions for a specific address on the blockchain\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me the latest transactions for address [contract]0xd8da6bf26964af9d7eed9e03e53415d37aa96045[/contract] [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    address: \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\",\n                    pageSize: 2,\n                    includeLogs: true\n                }\n            } as GetTransactionsByAddressContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the latest transactions for the address on eth:\\n\\n\" +\n                      \"1. Transfer Out\\n\" +\n                      \"   To: 0x1234...5678\\n\" +\n                      \"   Amount: 1.5 ETH\\n\" +\n                      \"   Time: 2024-01-24 10:30:15\\n\" +\n                      \"   Status: Success\\n\\n\" +\n                      \"2. Contract Interaction\\n\" +\n                      \"   Contract: 0xabcd...ef01 (Uniswap V3)\\n\" +\n                      \"   Method: swapExactTokensForTokens\\n\" +\n                      \"   Time: 2024-01-24 10:15:22\\n\" +\n                      \"   Status: Success\",\n                success: true,\n                data: {\n                    transactions: [{\n                        blockchain: \"eth\",\n                        from: \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\",\n                        to: \"0x1234567890123456789012345678901234567890\",\n                        hash: \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\",\n                        value: \"1500000000000000000\",\n                        gas: \"21000\",\n                        gasPrice: \"100000000\",\n                        gasUsed: \"21000\",\n                        timestamp: \"2024-01-24T10:30:15Z\",\n                        status: \"1\",\n                        blockNumber: \"123456789\",\n                        blockHash: \"0x9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedcba\"\n                    }]\n                }\n            } as GetTransactionsByAddressContent\n        } as ActionExample\n    ]],\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_TRANSACTIONS_BY_ADDRESS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_TRANSACTIONS_BY_ADDRESS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetTransactionsByAddressContent;\n            const parsedContent = parseAPIContent(content.text);\n\n            if (!parsedContent.chain || !parsedContent.contract) {\n                throw new ValidationError(\"Blockchain and address are required\");\n            }\n\n            // Validate pageSize if provided\n            if (content.filters?.pageSize && (content.filters.pageSize < 1 || content.filters.pageSize > 100)) {\n                throw new ValidationError(\"Page size must be between 1 and 100\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_TRANSACTIONS_BY_ADDRESS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetTransactionsByAddressContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasFilters: !!messageContent?.filters,\n                textContent: messageContent?.text,\n                contentType: typeof messageContent?.text\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            // Parse the prompt using our API content parser\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasChain: !!parsedContent.chain,\n                contract: parsedContent.contract,\n                chain: parsedContent.chain\n            });\n\n            validateRequiredFields(parsedContent, ['contract', 'chain']);\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTransactionsByAddress\",\n                        params: {\n                            blockchain: [parsedContent.chain],\n                            address: parsedContent.contract,\n                            pageSize: messageContent.filters?.pageSize || 5,\n                            includeLogs: messageContent.filters?.includeLogs || true\n                        },\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const result = response.data.result;\n                let formattedText = `Transactions for ${parsedContent.contract} on ${parsedContent.chain?.toUpperCase() || 'UNKNOWN'}:\\n\\n`;\n\n                result.transactions.forEach((tx: Transaction, index: number) => {\n                    const date = new Date(Number.parseInt(tx.timestamp, 16) * 1000).toLocaleString();\n                    const value = Number.parseInt(tx.value, 16) / 1e18;\n                    const status = tx.status === \"0x1\" ? \"Success\" : \"Failed\";\n\n                    formattedText += `${index + 1}. Transaction\\n`;\n                    formattedText += `   Hash: ${tx.hash.slice(0, 6)}...${tx.hash.slice(-4)}\\n`;\n                    formattedText += `   From: ${tx.from.slice(0, 6)}...${tx.from.slice(-4)}\\n`;\n                    formattedText += `   To: ${tx.to.slice(0, 6)}...${tx.to.slice(-4)}\\n`;\n                    formattedText += `   Value: ${value.toFixed(4)} ETH\\n`;\n                    formattedText += `   Status: ${status}\\n`;\n                    formattedText += `   Time: ${date}\\n\\n`;\n                });\n\n                if (callback) {\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            transactions: result.transactions,\n                            nextPageToken: result.nextPageToken,\n                            syncStatus: result.syncStatus\n                        }\n                    } as GetTransactionsByAddressContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch transactions: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch transactions\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting transactions: ${errorMessage}`,\n                    success: false\n                } as GetTransactionsByAddressContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_TRANSACTIONS_BY_ADDRESS_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetTransactionsByAddress;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetTransactionsByHash] ${message}`, data);\n        console.log(`[GetTransactionsByHash] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetTransactionsByHashContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        transactionHash?: string;\n        includeLogs?: boolean;\n    };\n    success?: boolean;\n    data?: {\n        transactions: Array<{\n            blockHash: string;\n            blockNumber: string;\n            blockchain: string;\n            from: string;\n            to: string;\n            hash: string;\n            value: string;\n            gas: string;\n            gasPrice: string;\n            gasUsed: string;\n            input: string;\n            nonce: string;\n            timestamp: string;\n            status: string;\n            type: string;\n            v: string;\n            r: string;\n            s: string;\n            transactionIndex: string;\n            cumulativeGasUsed: string;\n        }>;\n        syncStatus?: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        } | null;\n    };\n}\n\nexport const actionGetTransactionsByHash: Action = {\n    name: \"GET_TRANSACTIONS_BY_HASH_ANKR\",\n    similes: [\"GET_TX\", \"SHOW_TRANSACTION\", \"VIEW_TX\", \"TRANSACTION_DETAILS\"],\n    description: \"Get detailed information about a transaction by its hash\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me details for transaction [txHash]0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef[/txHash] [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    transactionHash: \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n                    includeLogs: true\n                }\n            } as GetTransactionsByHashContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the details for the transaction on eth:\\n\\n\" +\n                      \"Transaction: 0x1234...cdef\\n\" +\n                      \"Status: Success\\n\" +\n                      \"From: 0xabcd...ef01\\n\" +\n                      \"To: 0x9876...5432\\n\" +\n                      \"Value: 1.5 ETH\\n\" +\n                      \"Gas Used: 150,000\\n\" +\n                      \"Gas Price: 0.1 Gwei\\n\" +\n                      \"Block: 123456789\\n\" +\n                      \"Timestamp: 2024-01-24 10:30:15\",\n                success: true,\n                data: {\n                    transactions: [{\n                        blockchain: \"eth\",\n                        from: \"0xabcdef0123456789abcdef0123456789abcdef01\",\n                        to: \"0x9876543210987654321098765432109876543210\",\n                        hash: \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n                        value: \"1500000000000000000\",\n                        gas: \"21000\",\n                        gasPrice: \"100000000\",\n                        gasUsed: \"21000\",\n                        timestamp: \"2024-01-24T10:30:15Z\",\n                        status: \"1\",\n                        blockNumber: \"123456789\",\n                        blockHash: \"0xfedcba0987654321fedcba0987654321fedcba0987654321fedcba0987654321\"\n                    }]\n                }\n            } as GetTransactionsByHashContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_TRANSACTIONS_BY_HASH_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_TRANSACTIONS_BY_HASH_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetTransactionsByHashContent;\n            const parsedContent = parseAPIContent(content.text);\n\n            if (!parsedContent.chain || !parsedContent.txHash) {\n                throw new ValidationError(\"Blockchain and transaction hash are required\");\n            }\n\n            // Validate transaction hash format\n            if (!/^0x[a-fA-F0-9]{64}$/.test(parsedContent.txHash)) {\n                throw new ValidationError(\"Invalid transaction hash format\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_TRANSACTIONS_BY_HASH_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetTransactionsByHashContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasFilters: !!messageContent?.filters,\n                textContent: messageContent?.text,\n                contentType: typeof messageContent?.text\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            // Parse the prompt using our API content parser\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasTx: !!parsedContent.txHash,\n                hasChain: !!parsedContent.chain,\n                tx: parsedContent.txHash,\n                chain: parsedContent.chain\n            });\n\n            validateRequiredFields(parsedContent, ['txHash', 'chain']);\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTransactionsByHash\",\n                        params: {\n                            blockchain: parsedContent.chain,\n                            transactionHash: parsedContent.txHash,\n                            includeLogs: true\n                        },\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const transaction = response.data.result.transactions[0];\n                const timestamp = new Date(Number.parseInt(transaction.timestamp, 16) * 1000).toLocaleString();\n                const value = Number.parseInt(transaction.value, 16) / 1e18;\n                const gasPrice = Number.parseInt(transaction.gasPrice, 16) / 1e9;\n                const gasUsed = Number.parseInt(transaction.gasUsed, 16);\n                const blockNumber = Number.parseInt(transaction.blockNumber, 16);\n                const status = transaction.status === \"0x1\" ? \"Success\" : \"Failed\";\n\n                let formattedText = `Transaction Details on ${parsedContent.chain?.toUpperCase() || 'UNKNOWN'}:\\n\\n`;\n                formattedText += `Hash: ${transaction.hash}\\n`;\n                formattedText += `Status: ${status}\\n`;\n                formattedText += `From: ${transaction.from.slice(0, 6)}...${transaction.from.slice(-4)}\\n`;\n                formattedText += `To: ${transaction.to.slice(0, 6)}...${transaction.to.slice(-4)}\\n`;\n                formattedText += `Value: ${value.toFixed(6)} ETH\\n`;\n                formattedText += `Gas Used: ${gasUsed.toLocaleString()}\\n`;\n                formattedText += `Gas Price: ${gasPrice.toFixed(2)} Gwei\\n`;\n                formattedText += `Block: ${blockNumber.toLocaleString()}\\n`;\n                formattedText += `Time: ${timestamp}`;\n\n                if (callback) {\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: response.data.result\n                    } as GetTransactionsByHashContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch transaction: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch transaction\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting transaction: ${errorMessage}`,\n                    success: false\n                } as GetTransactionsByHashContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_TRANSACTIONS_BY_HASH_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetTransactionsByHash;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetBlockchainStats] ${message}`, data);\n        console.log(`[GetBlockchainStats] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetBlockchainStatsContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string[];\n    };\n    success?: boolean;\n    data?: {\n        stats: Array<{\n            blockchain: string;\n            latestBlock: number;\n            totalTransactions: string;\n            totalAccounts: string;\n            tps: number;\n            gasPrice: string;\n            marketCap: string;\n            totalValueLocked: string;\n        }>;\n    };\n}\n\n// Update the interface to match actual API response\ninterface AnkrBlockchainStats {\n    blockchain: string;\n    totalTransactionsCount: number;\n    totalEventsCount: number;\n    latestBlockNumber: number;\n    blockTimeMs: number;\n    nativeCoinUsdPrice: string;\n}\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetBlockchainStats: Action = {\n    name: \"GET_BLOCKCHAIN_STATS_ANKR\",\n    similes: [\"CHAIN_STATS\", \"BLOCKCHAIN_INFO\", \"NETWORK_STATS\", \"CHAIN_METRICS\"],\n    description: \"Retrieve statistical information about specified blockchain networks.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me stats for [chain]eth[/chain] blockchain\",\n                filters: {\n                    blockchain: [\"eth\"]\n                }\n            } as GetBlockchainStatsContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the current statistics for Ethereum:\\n\\n\" +\n                      \"Latest Block: 19,234,567\\n\" +\n                      \"Total Transactions: 2.5B\\n\" +\n                      \"Active Accounts: 245M\\n\" +\n                      \"TPS: 15.5\\n\" +\n                      \"Gas Price: 25 Gwei\\n\" +\n                      \"Market Cap: $250B\\n\" +\n                      \"Total Value Locked: $45B\",\n                success: true,\n                data: {\n                    stats: [{\n                        blockchain: \"eth\",\n                        latestBlock: 19234567,\n                        totalTransactions: \"2500000000\",\n                        totalAccounts: \"245000000\",\n                        tps: 15.5,\n                        gasPrice: \"25000000000\",\n                        marketCap: \"250000000000\",\n                        totalValueLocked: \"45000000000\"\n                    }]\n                }\n            } as GetBlockchainStatsContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_BLOCKCHAIN_STATS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_BLOCKCHAIN_STATS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetBlockchainStatsContent;\n\n            if (content.filters?.blockchain && !Array.isArray(content.filters.blockchain)) {\n                throw new ValidationError(\"Blockchain must be an array\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_BLOCKCHAIN_STATS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetBlockchainStatsContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasFilters: !!messageContent?.filters,\n                textContent: messageContent?.text,\n                contentType: typeof messageContent?.text\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasChain: !!parsedContent.chain,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: parsedContent.chain  // Changed from array to string\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: ANKR_ENDPOINTS.production.multichain\n            });\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getBlockchainStats\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const stats = response.data.result.stats;\n\n                // Format the response text\n                let formattedText = \"\";\n                for (const stat of stats) {\n                    formattedText += `Statistics for ${stat.blockchain.toUpperCase()}:\\n\\n`;\n                    formattedText += `Latest Block: ${stat.latestBlockNumber.toLocaleString()}\\n`;\n                    formattedText += `Total Transactions: ${(stat.totalTransactionsCount / 1e9).toFixed(1)}B\\n`;\n                    formattedText += `Total Events: ${(stat.totalEventsCount / 1e9).toFixed(1)}B\\n`;\n                    formattedText += `Block Time: ${(stat.blockTimeMs / 1000).toFixed(1)} seconds\\n`;\n                    formattedText += `Native Coin Price: $${Number(stat.nativeCoinUsdPrice).toFixed(2)}\\n\\n`;\n                }\n\n                // Update callback data structure to match new format\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            stats: stats.map((stat: AnkrBlockchainStats) => ({\n                                blockchain: stat.blockchain,\n                                latestBlock: stat.latestBlockNumber,\n                                totalTransactions: stat.totalTransactionsCount.toString(),\n                                totalEvents: stat.totalEventsCount.toString(),\n                                blockTime: stat.blockTimeMs / 1000,\n                                nativeCoinPrice: stat.nativeCoinUsdPrice\n                            }))\n                        }\n                    } as GetBlockchainStatsContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch blockchain stats: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch blockchain stats\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting blockchain stats: ${errorMessage}`,\n                    success: false\n                } as GetBlockchainStatsContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_BLOCKCHAIN_STATS_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetBlockchainStats;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetCurrencies] ${message}`, data);\n        console.log(`[GetCurrencies] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetCurrenciesContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        currencies: Array<{\n            blockchain: string;\n            address: string;\n            name: string;\n            symbol: string;\n            decimals: number;\n            thumbnail?: string;\n        }>;\n        syncStatus?: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetCurrencies: Action = {\n    name: \"GET_CURRENCIES_ANKR\",\n    similes: [\"LIST_CURRENCIES\", \"SHOW_CURRENCIES\", \"VIEW_CURRENCIES\", \"FETCH_CURRENCIES\"],\n    description: \"Retrieve information about currencies on specified blockchain networks.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me the top currencies on [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    pageSize: 5,\n                    pageToken: \"eyJsYXN0X2JhbGFuY2UiOiIyIn0=\"\n                }\n            } as GetCurrenciesContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the top currencies on Ethereum:\\n\\n\" +\n                      \"1. Ethereum (ETH)\\n\" +\n                      \"   Market Cap: $250B\\n\" +\n                      \"   Holders: 2.5M\\n\" +\n                      \"   Total Supply: 120.5M ETH\\n\\n\" +\n                      \"2. USD Coin (USDC)\\n\" +\n                      \"   Contract: 0xa0b8...c4d5\\n\" +\n                      \"   Market Cap: $45B\\n\" +\n                      \"   Holders: 1.2M\\n\" +\n                      \"   Total Supply: 45B USDC\",\n                success: true,\n                data: {\n                    currencies: [\n                        {\n                            blockchain: \"eth\",\n                            address: \"0x0000000000000000000000000000000000000000\",\n                            name: \"Ethereum\",\n                            symbol: \"ETH\",\n                            decimals: 18\n                        }\n                    ]\n                }\n            } as GetCurrenciesContent\n        } as ActionExample\n    ]],\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_CURRENCIES_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_CURRENCIES_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetCurrenciesContent;\n\n            if (!content.filters?.blockchain) {\n                throw new ValidationError(\"Blockchain is required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_CURRENCIES_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetCurrenciesContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasChain: !!parsedContent.chain,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: parsedContent.chain,\n                pageSize: messageContent.filters?.pageSize ?? 5\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: ANKR_ENDPOINTS.production.multichain\n            });\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getCurrencies\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const currencies = response.data.result.currencies;\n\n                // Format the response text\n                let formattedText = `Here are the top currencies from ${parsedContent.chain ? parsedContent.chain[0].toUpperCase() : 'Unknown Chain'}:\\n\\n`;\n\n                let index = 0;\n                for (const currency of currencies) {\n                    formattedText += [\n                        `${index + 1}. ${currency.name} (${currency.symbol})`,\n                        currency.address ? `   Contract: ${currency.address.slice(0, 6)}...${currency.address.slice(-4)}` : '',\n                        `   Decimals: ${currency.decimals}`,\n                        currency.thumbnail ? `   Logo: ${currency.thumbnail}` : '',\n                        '',\n                        ''\n                    ].filter(Boolean).join('\\n');\n                    index++;\n                }\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            currencies,\n                            syncStatus: response.data.result.syncStatus\n                        }\n                    } as GetCurrenciesContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch currencies data: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch currencies data\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting currencies: ${errorMessage}`,\n                    success: false\n                } as GetCurrenciesContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_CURRENCIES_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetCurrencies;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetInteractions] ${message}`, data);\n        console.log(`[GetInteractions] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetInteractionsContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;  // Changed from string[] to string\n        address?: string;     // Changed from walletAddress\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        interactions: Array<{\n            blockchain: string;\n            transactionHash: string;\n            blockNumber: number;\n            timestamp: string;\n            from: string;\n            to: string;\n            value: string;\n            gasPrice: string;\n            gasUsed: string;\n            methodName?: string;\n            logs: Array<{\n                address: string;\n                topics: string[];\n                data: string;\n                logIndex: number;\n            }>;\n        }>;\n        nextPageToken?: string;\n    };\n}\n\ninterface AnkrAPIResponse {\n    blockchains: string[];\n    syncStatus: {\n        timestamp: number;\n        lag: string;\n        status: string;\n    };\n}\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetInteractions: Action = {\n    name: \"GET_INTERACTIONS_ANKR\",\n    similes: [\"FETCH_INTERACTIONS\", \"SHOW_INTERACTIONS\", \"VIEW_INTERACTIONS\", \"LIST_INTERACTIONS\"],\n    description: \"Retrieve interactions between wallets and smart contracts on specified blockchain networks.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me interactions for the wallet [wallet]0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45[/wallet]\",\n                filters: {\n                    blockchain: \"eth\",  // Changed from string[] to string\n                    address: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\n                    pageSize: 5,\n                    pageToken: \"eyJsYXN0X2Jsb2NrIjoiMTIzNDU2Nzg4IiwibGFzdF9pbnRlcmFjdGlvbl9pbmRleCI6IjEifQ==\"\n                }\n            } as GetInteractionsContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the recent interactions:\\n\\n\" +\n                      \"1. Transfer (2024-03-15 14:30 UTC)\\n\" +\n                      \"   From: 0xabc...def1\\n\" +\n                      \"   To: 0x123...5678\\n\" +\n                      \"   Value: 1.5 ETH\\n\" +\n                      \"   Gas Used: 21,000\\n\" +\n                      \"   Tx Hash: 0xdef...789\\n\\n\" +\n                      \"2. Approve (2024-03-15 14:25 UTC)\\n\" +\n                      \"   From: 0xabc...def1\\n\" +\n                      \"   To: 0x123...5678\\n\" +\n                      \"   Value: 0 ETH\\n\" +\n                      \"   Gas Used: 45,000\\n\" +\n                      \"   Tx Hash: 0x789...012\",\n                success: true,\n                data: {\n                    interactions: [{\n                        blockchain: \"eth\",\n                        transactionHash: \"0xdef...789\",\n                        blockNumber: 17000100,\n                        timestamp: \"2024-03-15T14:30:00Z\",\n                        from: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n                        to: \"0x1234567890abcdef1234567890abcdef12345678\",\n                        value: \"1500000000000000000\",\n                        gasPrice: \"20000000000\",\n                        gasUsed: \"21000\",\n                        methodName: \"transfer\",\n                        logs: [{\n                            address: \"0x1234567890abcdef1234567890abcdef12345678\",\n                            topics: [\"0x000...123\"],\n                            data: \"0x000...456\",\n                            logIndex: 0\n                        }]\n                    }]\n                }\n            } as GetInteractionsContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_INTERACTIONS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_INTERACTIONS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetInteractionsContent;\n\n            // Only wallet address is required based on the API\n            if (!content.filters?.address) {\n                throw new ValidationError(\"Wallet address is required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_INTERACTIONS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetInteractionsContent;\n            const parsedContent = parseAPIContent(messageContent.text);\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['wallet']);\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: parsedContent.chain || \"eth\",\n                address: parsedContent.wallet,\n                pageSize: messageContent.filters?.pageSize ?? 5,\n                pageToken: messageContent.filters?.pageToken\n            };\n\n            try {\n                const response = await axios.post<{\n                    id: number;\n                    jsonrpc: string;\n                    result: AnkrAPIResponse;\n                }>(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getInteractions\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                // Format the response text based on the sync status\n                const formattedText = `Blockchain Status Information:\n\nAvailable Blockchains: ${response.data.result.blockchains.join(', ')}\nSync Status: ${response.data.result.syncStatus.status}\nLag: ${response.data.result.syncStatus.lag}`;\n\n                if (callback) {\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            interactions: [],\n                            syncStatus: response.data.result.syncStatus,\n                            availableBlockchains: response.data.result.blockchains\n                        }\n                    } as GetInteractionsContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch interactions data: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch interactions data\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting interactions: ${errorMessage}`,\n                    success: false\n                } as GetInteractionsContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_INTERACTIONS_ANKR action\");\n        }\n    },\n\n\n};\n\nexport default actionGetInteractions;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetNFTHolders] ${message}`, data);\n        console.log(`[GetNFTHolders] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetNFTHoldersContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;  // Changed from string[] to single string\n        contractAddress?: string;\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        holders: Array<{\n            holderAddress: string;\n            balance: string;\n            balanceRawInteger: string;\n        }>;\n        nextPageToken?: string;\n        blockchain?: string;\n        contractAddress?: string;\n        tokenDecimals?: number;\n        holdersCount?: number;\n        syncStatus?: {\n            timestamp: number;\n            lag: string;\n            status: string;\n        };\n    };\n}\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetNFTHolders: Action = {\n    name: \"GET_NFT_HOLDERS_ANKR\",\n    similes: [\"FETCH_NFT_HOLDERS\", \"SHOW_NFT_HOLDERS\", \"VIEW_NFT_HOLDERS\", \"LIST_NFT_HOLDERS\"],\n    description: \"Retrieve holders of specific NFTs on specified blockchain networks.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me holders of NFT contract [contract]0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258[/contract] on [chain]bsc[/chain]\",\n                filters: {\n                    blockchain: \"bsc\",  // Changed from string[] to string\n                    contractAddress: \"0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258\",\n                    pageSize: 5\n                }\n            } as GetNFTHoldersContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here are the NFT holders:\\n\\n\" +\n                      \"1. 0xabc...def1\\n\" +\n                      \"   Balance: 1.5\\n\" +\n                      \"   Raw Balance: 1500000000000000000\\n\\n\" +\n                      \"2. 0xdef...789a\\n\" +\n                      \"   Balance: 2.0\\n\" +\n                      \"   Raw Balance: 2000000000000000000\",\n                success: true,\n                data: {\n                    holders: [{\n                        holderAddress: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n                        balance: \"1.5\",\n                        balanceRawInteger: \"1500000000000000000\"\n                    }],\n                    blockchain: \"bsc\",\n                    contractAddress: \"0xf307910A4c7bbc79691fD374889b36d8531B08e3\",\n                    tokenDecimals: 18,\n                    holdersCount: 1000,\n                    syncStatus: {\n                        timestamp: 1737769593,\n                        lag: \"-2m\",\n                        status: \"synced\"\n                    }\n                }\n            } as GetNFTHoldersContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_NFT_HOLDERS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_NFT_HOLDERS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetNFTHoldersContent;\n\n            if (!content.filters?.contractAddress) {\n                throw new ValidationError(\"Contract address is required\");\n            }\n\n            // Blockchain is optional, defaults to \"eth\"\n            if (content.filters?.blockchain && typeof content.filters.blockchain !== 'string') {\n                throw new ValidationError(\"Blockchain must be a string\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_NFT_HOLDERS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetNFTHoldersContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasToken: !!parsedContent.token,\n                hasChain: !!parsedContent.chain,\n                contract: parsedContent.contract,\n                token: parsedContent.token,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['contract']);\n\n            const requestParams = {\n                blockchain: parsedContent.chain,\n                contractAddress: parsedContent.contract,\n                pageSize: messageContent.filters?.pageSize || 10,\n                pageToken: messageContent.filters?.pageToken\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: endpoint\n            });\n\n            const response = await axios.post(\n                endpoint,\n                {\n                    jsonrpc: \"2.0\",\n                    method: \"ankr_getNFTHolders\",\n                    params: requestParams,\n                    id: 1\n                },\n                {\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n\n            logGranular(\"Received response from Ankr API\", {\n                statusCode: response.status,\n                data: response.data\n            });\n\n            const result = response.data.result;\n            const formattedText =\n                `NFT Holders:\nTotal Holders: ${result.holders.length}\n\n${result.holders.map((holderAddress: string, index: number) =>\n    `${index + 1}. ${holderAddress}`\n).join('\\n')}\n\n${result.nextPageToken ? 'More holders available. Use the page token to see more.\\n' : ''}\n${result.syncStatus ? `Sync Status:\nLast Update: ${new Date(result.syncStatus.timestamp * 1000).toLocaleString()}\nLag: ${result.syncStatus.lag}\nStatus: ${result.syncStatus.status}` : ''}`;\n\n            logGranular(\"Formatted response text\", { formattedText });\n\n            if (callback) {\n                logGranular(\"Sending success callback with formatted text\");\n                callback({\n                    text: formattedText,\n                    success: true,\n                    data: {\n                        holders: result.holders.map((address: string) => ({\n                            holderAddress: address,\n                            balance: \"1\",  // Default values since not provided in response\n                            balanceRawInteger: \"1\"\n                        })),\n                        nextPageToken: result.nextPageToken,\n                        syncStatus: result.syncStatus\n                    }\n                } as GetNFTHoldersContent);\n            }\n\n            return true;\n\n        } catch (error: unknown) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting NFT holders: ${errorMessage}`,\n                    success: false\n                } as GetNFTHoldersContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_NFT_HOLDERS_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetNFTHolders;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetNFTTransfers] ${message}`, data);\n        console.log(`[GetNFTTransfers] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetNFTTransfersContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        contractAddress?: string;\n        fromTimestamp?: number;\n        toTimestamp?: number;\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        transfers: Array<{\n            fromAddress: string;\n            toAddress: string;\n            contractAddress: string;\n            value: string;\n            valueRawInteger: string;\n            blockchain: string;\n            tokenName: string;\n            tokenSymbol: string;\n            tokenDecimals: number;\n            thumbnail: string;\n            transactionHash: string;\n            blockHeight: number;\n            timestamp: number;\n        }>;\n        syncStatus?: {\n            timestamp?: number;\n            lag?: string;\n            status?: string;\n        } | null;\n    };\n}\n\n// Add type definition for transfer\ninterface NFTTransfer {\n    tokenName: string;\n    tokenSymbol: string;\n    fromAddress: string;\n    toAddress: string;\n    value: string;\n    timestamp: number;\n    transactionHash: string;\n    thumbnail?: string;\n}\n\nexport const actionGetNFTTransfers: Action = {\n    name: \"GET_NFT_TRANSFERS_ANKR\",\n    similes: [\"LIST_NFT_TRANSFERS\", \"SHOW_NFT_TRANSFERS\", \"VIEW_NFT_TRANSFERS\", \"GET_NFT_HISTORY\"],\n    description: \"Get NFT transfer history for a specific address or contract on eth.\",\n\n\n\n    // Fix the example data to match the interface\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me NFT transfers for contract [contract]0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258[/contract] [chain]eth[/chain] [fromtimestamp]1655197483[/fromtimestamp][totimestamp]1671974699[/totimestamp]\",\n                filters: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258\",\n                    pageSize: 5\n                }\n            } as GetNFTTransfersContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"NFT Transfers:\\n\\n\" +\n                      \"1. Transfer of Token #1234\\n\" +\n                      \"   From: 0xabcd...ef01\\n\" +\n                      \"   To: 0x9876...4321\\n\" +\n                      \"   Time: 1/24/2024, 10:30:15 AM\\n\" +\n                      \"   Token: CoolNFT #123\\n\\n\" +\n                      \"2. Transfer of Token #456\\n\" +\n                      \"   From: 0x9876...3210\\n\" +\n                      \"   To: 0xfedc...ba98\\n\" +\n                      \"   Time: 1/24/2024, 10:15:22 AM\\n\" +\n                      \"   Token: CoolNFT #456\\n\",\n                success: true,\n                data: {\n                    transfers: [\n                        {\n                            fromAddress: \"0xabcdef0123456789abcdef0123456789abcdef01\",\n                            toAddress: \"0x9876543210fedcba9876543210fedcba98765432\",\n                            contractAddress: \"0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258\",\n                            value: \"1\",\n                            valueRawInteger: \"1\",\n                            blockchain: \"eth\",\n                            tokenName: \"CoolNFT\",\n                            tokenSymbol: \"COOL\",\n                            tokenDecimals: 18,\n                            thumbnail: \"https://example.com/nft/123.png\",\n                            transactionHash: \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n                            blockHeight: 123456789,\n                            timestamp: 1706093415\n                        },\n                        {\n                            fromAddress: \"0x9876543210987654321098765432109876543210\",\n                            toAddress: \"0xfedcba9876543210fedcba9876543210fedcba98\",\n                            contractAddress: \"0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258\",\n                            value: \"1\",\n                            valueRawInteger: \"1\",\n                            blockchain: \"eth\",\n                            tokenName: \"CoolNFT\",\n                            tokenSymbol: \"COOL\",\n                            tokenDecimals: 18,\n                            thumbnail: \"https://example.com/nft/456.png\",\n                            transactionHash: \"0x9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedcba\",\n                            blockHeight: 123456788,\n                            timestamp: 1706092522\n                        }\n                    ],\n                    syncStatus: {\n                        timestamp: 1706093415,\n                        lag: \"0s\",\n                        status: \"synced\"\n                    }\n                }\n            } as GetNFTTransfersContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_NFT_TRANSFERS_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_NFT_TRANSFERS_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetNFTTransfersContent;\n\n            if (!content.filters?.blockchain || !content.filters?.contractAddress) {\n                throw new ValidationError(\"Blockchain and contract address are required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_NFT_TRANSFERS_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetNFTTransfersContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasFilters: !!messageContent?.filters,\n                textContent: messageContent?.text,\n                contentType: typeof messageContent?.text\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasChain: !!parsedContent.chain,\n                hasFromTimestamp: !!parsedContent.fromTimestamp,\n                hasToTimestamp: !!parsedContent.toTimestamp,\n                contract: parsedContent.contract,\n                chain: parsedContent.chain,\n                fromTimestamp: parsedContent.fromTimestamp,\n                toTimestamp: parsedContent.toTimestamp,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['contract', 'chain', 'fromTimestamp', 'toTimestamp']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                address: parsedContent.contract,\n                blockchain: [parsedContent.chain],\n                fromTimestamp: parsedContent.fromTimestamp,\n                toTimestamp: parsedContent.toTimestamp\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: ANKR_ENDPOINTS.production.multichain\n            });\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getTokenTransfers\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const transfers = response.data.result.transfers;\n\n                // Format the response text\n                let formattedText = \"Token Transfers:\\n\\n\";\n                transfers.forEach((transfer: NFTTransfer, index: number) => {\n                    formattedText += `${index + 1}. Transfer of ${transfer.tokenName} (${transfer.tokenSymbol})\\n`;\n                    formattedText += `   From: ${transfer.fromAddress.slice(0, 6)}...${transfer.fromAddress.slice(-4)}\\n`;\n                    formattedText += `   To: ${transfer.toAddress.slice(0, 6)}...${transfer.toAddress.slice(-4)}\\n`;\n                    formattedText += `   Amount: ${transfer.value}\\n`;\n                    formattedText += `   Time: ${new Date(transfer.timestamp * 1000).toLocaleString()}\\n`;\n                    formattedText += `   Tx Hash: ${transfer.transactionHash}\\n`;\n                    if (transfer.thumbnail) {\n                        formattedText += `   Token Icon: ${transfer.thumbnail}\\n`;\n                    }\n                    formattedText += \"\\n\";\n                });\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            transfers,\n                            syncStatus: response.data.result.syncStatus\n                        }\n                    } as GetNFTTransfersContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch NFT transfers: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch NFT transfers\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting NFT transfers: ${errorMessage}`,\n                    success: false\n                } as GetNFTTransfersContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_NFT_TRANSFERS_ANKR action\");\n        }\n    }\n};\n\nexport default actionGetNFTTransfers;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetNFTMetadata] ${message}`, data);\n        console.log(`[GetNFTMetadata] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetNFTMetadataContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string;\n        contractAddress?: string;\n        tokenId?: string;\n    };\n    success?: boolean;\n    data?: {\n        metadata: {\n            blockchain: string;\n            contractAddress: string;\n            contractType: string;\n            tokenId: string;\n        };\n        attributes: {\n            contractType: string;\n            tokenUrl: string;\n            imageUrl: string;\n            name: string;\n            description: string;\n            traits: Array<{\n                trait_type: string;\n                value: string;\n            }>;\n        };\n    };\n}\n\nexport const actionGetNFTMetadata: Action = {\n    name: \"GET_NFT_METADATA_ANKR\",\n    similes: [\"GET_NFT_INFO\", \"SHOW_NFT_DETAILS\", \"VIEW_NFT\", \"NFT_METADATA\"],\n    description: \"Get detailed metadata for a specific NFT including traits, images, and contract information.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me the metadata for NFT [token]1234[/token] at contract [contract]0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d[/contract] [chain]eth[/chain]\",\n                filters: {\n                    blockchain: \"eth\",\n                    contractAddress: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n                    tokenId: \"1234\"\n                }\n            } as GetNFTMetadataContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"NFT Metadata for Bored Ape #1234:\\n\\n\" +\n                      \"Collection: Bored Ape Yacht Club\\n\" +\n                      \"Contract: 0xbc4c...f13d (ERC721)\\n\\n\" +\n                      \"Description: A unique Bored Ape NFT living on the Ethereum blockchain\\n\\n\" +\n                      \"Traits:\\n\" +\n                      \"- Background: Blue\\n\" +\n                      \"- Fur: Dark Brown\\n\" +\n                      \"- Eyes: Bored\\n\" +\n                      \"- Mouth: Grin\\n\",\n                success: true,\n                data: {\n                    metadata: {\n                        blockchain: \"eth\",\n                        contractAddress: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n                        contractType: \"ERC721\",\n                        tokenId: \"1234\"\n                    },\n                    attributes: {\n                        contractType: \"ERC721\",\n                        tokenUrl: \"ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/1234\",\n                        imageUrl: \"ipfs://QmRRPWG96cmgTn2qSzjwr2qvfNEuhunv6FNeMFGa9bx6mQ\",\n                        name: \"Bored Ape #1234\",\n                        description: \"A unique Bored Ape NFT living on the Ethereum blockchain\",\n                        traits: [\n                            { trait_type: \"Background\", value: \"Blue\" },\n                            { trait_type: \"Fur\", value: \"Dark Brown\" },\n                            { trait_type: \"Eyes\", value: \"Bored\" },\n                            { trait_type: \"Mouth\", value: \"Grin\" }\n                        ]\n                    }\n                }\n            } as GetNFTMetadataContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_NFT_METADATA_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_NFT_METADATA_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetNFTMetadataContent;\n\n            if (!content.filters?.blockchain || !content.filters?.contractAddress || !content.filters?.tokenId) {\n                throw new ValidationError(\"Blockchain, contract address, and token ID are required\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_NFT_METADATA_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetNFTMetadataContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {})\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                promptLength: messageContent.text?.length,\n            });\n\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasContract: !!parsedContent.contract,\n                hasToken: !!parsedContent.token,\n                hasChain: !!parsedContent.chain,\n                contract: parsedContent.contract,\n                token: parsedContent.token,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['contract', 'token', 'chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: parsedContent.chain,\n                contractAddress: parsedContent.contract,\n                tokenId: parsedContent.token\n            };\n\n            console.log(\"Debug - API request parameters:\", {\n                params: requestParams,\n                endpoint: ANKR_ENDPOINTS.production.multichain\n            });\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getNFTMetadata\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const nftData = response.data.result;\n\n                // Format the response text\n                let formattedText = `NFT Metadata for ${nftData.attributes.name}:\\n\\n`;\n                formattedText += `Collection: ${nftData.attributes.name.split('#')[0].trim()}\\n`;\n                formattedText += `Contract: ${nftData.metadata.contractAddress.slice(0, 6)}...${nftData.metadata.contractAddress.slice(-4)} (${nftData.metadata.contractType})\\n\\n`;\n\n                if (nftData.attributes.description) {\n                    formattedText += `Description: ${nftData.attributes.description}\\n\\n`;\n                }\n\n                if (nftData.attributes.traits && nftData.attributes.traits.length > 0) {\n                    formattedText += \"Traits:\\n\";\n                    for (const trait of nftData.attributes.traits as { trait_type: string; value: string }[]) {\n                        formattedText += `- ${trait.trait_type}: ${trait.value}\\n`;\n                    }\n                }\n\n                if (nftData.attributes.imageUrl) {\n                    formattedText += `\\nImage URL: ${nftData.attributes.imageUrl}\\n`;\n                }\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: nftData\n                    } as GetNFTMetadataContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch NFT metadata: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch NFT metadata\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting NFT metadata: ${errorMessage}`,\n                    success: false\n                } as GetNFTMetadataContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_NFT_METADATA_ANKR action\");\n        }\n    },\n\n\n};\n\nexport default actionGetNFTMetadata;\n","// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// ------------------------------------------------------------------------------------------------\n// Essential Imports\n// ------------------------------------------------------------------------------------------------\nimport axios from 'axios';\nimport { getConfig, validateankrConfig, ANKR_ENDPOINTS } from '../environment';\nimport { APIError, ConfigurationError, ValidationError } from '../error/base';\nimport { parseAPIContent, validateRequiredFields } from '../validator/apiParseValidation';\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.ANKR_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.debug(`[GetNFTsByOwner] ${message}`, data);\n        console.log(`[GetNFTsByOwner] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// ------------------------------------------------------------------------------------------------\n// Granular Logger\n// ------------------------------------------------------------------------------------------------\n\ninterface GetNFTsByOwnerContent extends Content {\n    text: string;\n    filters?: {\n        blockchain?: string[];\n        walletAddress?: string;\n        pageSize?: number;\n        pageToken?: string;\n    };\n    success?: boolean;\n    data?: {\n        owner: string;\n        assets: Array<{\n            blockchain: string;\n            name: string;\n            tokenId: string;\n            tokenUrl: string;\n            imageUrl: string;\n            collectionName: string;\n            symbol: string;\n            contractType: string;\n            contractAddress: string;\n            quantity?: string;  // Added for ERC1155 support\n        }>;\n        syncStatus?: {\n            timestamp?: number;\n            lag?: string;\n            status?: string;\n        } | null;\n    };\n}\n\ntype NFTAsset = {\n    blockchain: string;\n    name: string;\n    tokenId: string;\n    tokenUrl: string;\n    imageUrl: string;\n    collectionName: string;\n    symbol: string;\n    contractType: string;\n    contractAddress: string;\n    quantity?: string;\n};\n\n// ------------------------------------------------------------------------------------------------\n// Core Action implementation\n// ------------------------------------------------------------------------------------------------\nexport const actionGetNFTsByOwner: Action = {\n    name: \"GET_NFTS_BY_OWNER_ANKR\",\n    similes: [\"LIST_NFTS\", \"SHOW_NFTS\", \"VIEW_NFTS\", \"FETCH_NFTS\", \"GET_OWNED_NFTS\"],\n    description: \"Retrieve all NFTs owned by a specific wallet address across multiple blockchains with detailed metadata.\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Show me all NFTs owned by wallet [wallet]0x1234567890123456789012345678901234567890[/wallet] on [chain]eth[/chain]\",\n                filters: {\n                    blockchain: [\"eth\"],\n                    walletAddress: \"0x1234567890123456789012345678901234567890\",\n                    pageSize: 10\n                }\n            } as GetNFTsByOwnerContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"NFTs owned by 0x1234567890123456789012345678901234567890:\\n\\n\" +\n                      \"1. Bored Ape #1234\\n\" +\n                      \"   Collection: Bored Ape Yacht Club\\n\" +\n                      \"   Contract: 0xbc4c...f13d\\n\" +\n                      \"   Token ID: 1234\\n\\n\" +\n                      \"2. CryptoPunk #5678\\n\" +\n                      \"   Collection: CryptoPunks\\n\" +\n                      \"   Contract: 0x2505...42a2\\n\" +\n                      \"   Token ID: 5678\\n\",\n                success: true,\n                data: {\n                    owner: \"0x1234567890123456789012345678901234567890\",\n                    assets: [\n                        {\n                            blockchain: \"eth\",\n                            name: \"Bored Ape #1234\",\n                            tokenId: \"1234\",\n                            tokenUrl: \"ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/1234\",\n                            imageUrl: \"ipfs://QmRRPWG96cmgTn2qSzjwr2qvfNEuhunv6FNeMFGa9bx6mQ\",\n                            collectionName: \"Bored Ape Yacht Club\",\n                            symbol: \"BAYC\",\n                            contractType: \"ERC721\",\n                            contractAddress: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"\n                        },\n                        {\n                            blockchain: \"eth\",\n                            name: \"CryptoPunk #5678\",\n                            tokenId: \"5678\",\n                            tokenUrl: \"https://cryptopunks.app/cryptopunks/details/5678\",\n                            imageUrl: \"https://cryptopunks.app/cryptopunks/image/5678\",\n                            collectionName: \"CryptoPunks\",\n                            symbol: \"PUNK\",\n                            contractType: \"ERC721\",\n                            contractAddress: \"0x2505...42a2\"\n                        }\n                    ]\n                }\n            } as GetNFTsByOwnerContent\n        } as ActionExample\n    ]],\n    // ------------------------------------------------------------------------------------------------\n    // Core Validation implementation\n    // ------------------------------------------------------------------------------------------------\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_NFTS_BY_OWNER_ANKR\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_NFTS_BY_OWNER_ANKR action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetNFTsByOwnerContent;\n\n            if (!content.filters?.blockchain || !content.filters?.walletAddress) {\n                throw new ValidationError(\"Blockchain and wallet address are required\");\n            }\n\n            if (content.filters?.blockchain && !Array.isArray(content.filters.blockchain)) {\n                throw new ValidationError(\"Blockchain must be an array\");\n            }\n\n            logGranular(\"Validation successful\");\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            if (error instanceof ValidationError) {\n                throw error;\n            }\n            throw new ValidationError(error instanceof Error ? error.message : \"Unknown validation error\");\n        }\n    },\n    // ------------------------------------------------------------------------------------------------\n    // Core Handler implementation\n    // ------------------------------------------------------------------------------------------------\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_NFTS_BY_OWNER_ANKR action\");\n\n        try {\n            const messageContent = message.content as GetNFTsByOwnerContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type\n            });\n\n            const config = await validateankrConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasWallet: !!config.ANKR_WALLET,\n                env: config.ANKR_ENV\n            });\n            const wallet = config.ANKR_WALLET;\n            if (!wallet) {\n                throw new ConfigurationError(\"ANKR_WALLET not found in environment variables\");\n            }\n\n            const endpoint = `https://rpc.ankr.com/multichain/${wallet}`;\n\n            // Parse the prompt using our API content parser\n            const parsedContent = parseAPIContent(messageContent.text);\n            console.log(\"Debug - Parsed API content:\", {\n                hasWallet: !!parsedContent.wallet,\n                hasChain: !!parsedContent.chain,\n                wallet: parsedContent.wallet,\n                chain: parsedContent.chain,\n                matches: parsedContent.raw.matches\n            });\n\n            // Validate required fields\n            validateRequiredFields(parsedContent, ['wallet', 'chain']);\n\n            // Prepare API request parameters\n            const requestParams = {\n                blockchain: [parsedContent.chain],  // API expects array\n                walletAddress: parsedContent.wallet,\n                pageSize: messageContent.filters?.pageSize ?? 10,\n                pageToken: messageContent.filters?.pageToken\n            };\n\n            console.log(\"Debug - API request parameters:\", requestParams);\n\n            try {\n                const response = await axios.post(\n                    endpoint,\n                    {\n                        jsonrpc: \"2.0\",\n                        method: \"ankr_getNFTsByOwner\",\n                        params: requestParams,\n                        id: 1\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }\n                );\n\n                logGranular(\"Received response from Ankr API\", {\n                    statusCode: response.status,\n                    data: response.data\n                });\n\n                if (response.data.error) {\n                    throw new APIError(`Ankr API error: ${response.data.error.message}`);\n                }\n\n                const { owner, assets, syncStatus } = response.data.result;\n\n                // Format the response text\n                let formattedText = `NFTs owned by ${owner}:\\n\\n`;\n\n                for (const [index, nft] of (assets as NFTAsset[]).entries()) {\n                    formattedText += `${index + 1}. ${nft.name || 'Unnamed NFT'}\\n`;\n                    if (nft.collectionName) {\n                        formattedText += `   Collection: ${nft.collectionName}\\n`;\n                    }\n                    formattedText += `   Contract: ${nft.contractAddress.slice(0, 6)}...${nft.contractAddress.slice(-4)} (${nft.contractType})\\n`;\n                    formattedText += `   Token ID: ${nft.tokenId}\\n`;\n                    if (nft.quantity) {\n                        formattedText += `   Quantity: ${nft.quantity}\\n`;\n                    }\n                    if (nft.tokenUrl) {\n                        formattedText += `   Metadata URL: ${nft.tokenUrl}\\n`;\n                    }\n                    formattedText += '\\n';\n                }\n\n                if (callback) {\n                    logGranular(\"Sending success callback with formatted text\", { formattedText });\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        data: {\n                            owner,\n                            assets,\n                            syncStatus\n                        }\n                    } as GetNFTsByOwnerContent);\n                }\n\n                return true;\n\n            } catch (error) {\n                logGranular(\"API request failed\", { error });\n                if (axios.isAxiosError(error)) {\n                    throw new APIError(\n                        `Failed to fetch NFTs data: ${error.message}`,\n                        error.response?.status\n                    );\n                }\n                throw new APIError(\"Failed to fetch NFTs data\");\n            }\n\n        } catch (error) {\n            logGranular(\"Handler execution failed\", { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n                callback({\n                    text: `Error getting NFTs: ${errorMessage}`,\n                    success: false\n                } as GetNFTsByOwnerContent);\n            }\n\n            if (error instanceof ConfigurationError ||\n                error instanceof ValidationError ||\n                error instanceof APIError) {\n                throw error;\n            }\n\n            throw new APIError(\"Failed to execute GET_NFTS_BY_OWNER_ANKR action\");\n        }\n    },\n\n\n};\n\nexport default actionGetNFTsByOwner;\n\n"],"mappings":"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","names":["util","objectUtil","errorUtil","errorMap","ctx","result","issues","elements","processed","ZodFirstPartyTypeKind","config","elizaLogger","elizaLogger","config","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios","elizaLogger","axios","config","GRANULAR_LOG","logGranular","elizaLogger","axios"]}